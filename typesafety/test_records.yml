---
- case: no_error_true
  parametrized:
    - level: info
    - level: debug
    - level: error
    - level: trace
  main: |
    from loguru import logger

    LOG = logger.opt(record=True)

    LOG.{{ level }}('test')
    LOG.{{ level }}('r={record["line"]}')
    LOG.{{ level }}('{record["line"]}')
  out: |
    main:5: note: Logger configured with record=True is not using record structure
- case: no_error_false
  main: |
    from loguru import logger

    logger.opt(record=False).info('test')
- case: record_in_kwargs
  parametrized:
    - record: "True"
      out: "main:4: error: record keyword argument cannot override record structure  [logger-kwarg]"
    - record: "False"
      out: "main:4: error: Logger is accessing record structure without record=True  [logger-record]"
  main: |
    from loguru import logger

    logger.opt(record={{ record  }}).info(
      'line is {record["line"]}',
      record={
        'line': 1,
      },
    )
  out: "{{ out }}"
- case: record_keys_errors
  parametrized:
    - key: foo
    - key: elapsedd
    - key: odin
  main: |
    from loguru import logger

    logger.opt(record=True).info(
      'Accessing {record["{{ key }}"]} makes for error={yes_no}',
      yes_no=len('{{ out }}') != 0,
    )
  out: |
    main:4: error: Logger record structure does not contain {{ key }} key  [logger-record]
- case: record_keys_ok
  parametrized:
    - key: line
    - key: exception
    - key: elapsed
    - key: exception
    - key: extra
    - key: file
    - key: function
    - key: level
    - key: line
    - key: message
    - key: module
    - key: name
    - key: process
    - key: thread
    - key: time
  main: |
    from loguru import logger

    logger.opt(record=True).info(
      'Accessing {record["{{ key }}"]} makes for error={yes_no}',
      yes_no=len('{{ out }}') != 0,
    )
